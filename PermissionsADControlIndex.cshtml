@using EmasMotesCore.Models.Models_EMAS;
@using EmasMotesCore.Models.ModelsDTO;
@using EmasMotesCore.Helpers;
@using EmasMotesCore.Controllers;

<script>
    var checkInProccess = false;
    var checkInProccess2 = false;
    var myValue = '@ViewBag.IsAD';
    var n_roleId;
<<<<<<< HEAD
=======
	var NoViewFullAccessPopup = false;
	var initAttribute = 0;
	var scipCreateChildren = false;
>>>>>>> loc4
      
    function checkIsAD(){
        if (myValue == 'False') {
            $("#btnRefreshRole").hide("true");
        }
    }

    function IsFullControlChanged(e) {
    //debugger;
        if (checkInProccess2 == false) {
            checkInProccess = true;
            $("#IsCreateCBX").dxCheckBox("instance").option("value", e.value);
            $("#IsEditCBX").dxCheckBox("instance").option("value", e.value);
            $("#IsDeleteCBX").dxCheckBox("instance").option("value", e.value);
            checkInProccess = false;
            return true;
        }
        else {
            return true;
        }
    }

    function eccessRightsGridStateChanged(e) {
//      debugger;
        if ((e.dataField === 'IsCreate' || e.dataField === 'IsEdit' || e.dataField === 'IsDelete') && e.parentType === 'dataRow') {
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = function (args) {
                CBXStateChanged(args);
                defaultValueChangeHandler(args);
            }
        }
        else if ((e.dataField === 'IsFullControl') && e.parentType === 'dataRow'){
            const defaultValueChangeHandler = e.editorOptions.onValueChanged;
            e.editorOptions.onValueChanged = function (args) {
                IsFullControlChanged(args);
                defaultValueChangeHandler(args);
            }       
        }

}

    function CBXStateChanged(e) {
//      debugger;
        if (checkInProccess == false) {
            checkInProccess2 = true;

            $("#IsFullControlCBX").dxCheckBox("instance").option("value", 
                $("#IsCreateCBX").dxCheckBox("instance").option("value")
                && $("#IsEditCBX").dxCheckBox("instance").option("value")
                && $("#IsDeleteCBX").dxCheckBox("instance").option("value")                   
            );
            checkInProccess2 = false;
            return true;
        }
        else{
            return true;
        }
    }


    var currentKey = -1;
    function onEditingStart(e) {
        currentKey = e.key;
    }
    
    function setPopupTitle(e) {
        var title = "";
        if (currentKey > -1)
            title = "Редактирование записи";
        else
            title = "Создание новой записи";
        e.component.option("title", title);
        currentKey = -1;
    }

    function onUserChanged() {
        debugger;
         $.ajax({
            type: "POST",
            url: '@Url.Action("UserChanged", "PermissionsControl")',
            traditional: true,
            data: {
                userLogin: $("#permissionOtherUserSelectBox").dxSelectBox('instance').option("value")
             }
        }).done(function (response) {
            debugger;
            window.location.href = "@Url.Action("Index", "Home", new { httproute = "" })";
        }).fail(function (data) {
            //alert("Failed: " + data.response);
        });
    }

    function saveOlapPermissionsCube() {
    //debugger;
        alert('saveOlapPermissionsCube');
    }

    function saveOlapPermissionsDimension() {
    //debugger;
        alert('saveOlapPermissionsDimension');
    }

    function getTabPanelPermissionsAD_SelectedIndex() {
        return $("#PermissionsAD_TabPanel").dxTabPanel("instance").option("selectedIndex");
    }

    function getTabPanelPermissionsAD_SelectedTitle() {
        var selected_index = getTabPanelPermissionsAD_SelectedIndex();
        return $("#PermissionsAD_TabPanel").dxTabPanel("instance").option("items")[selected_index].title;
    }

    function OnSelectionChanged_PermissionsAD_TabPanel(e) {
        debugger;
        
        if (getTabPanelPermissionsAD_SelectedTitle() == 'Доступ к кубам') {

            $.ajax({
                type: "GET",
                url: '@Url.Action("OlapAccessGridColumnInit", "PermissionsControl")',

                data: {
                    mode: 'cube'
                },

                success: function (response) {

                    $("#cubeAccessGrid").html("");
                    $("#cubeAccessGrid").html(response);
                }
            });

        } else if (getTabPanelPermissionsAD_SelectedTitle() == 'Доступ к измерениям') {

            $.ajax({
                type: "GET",
                url: '@Url.Action("OlapAccessGridColumnInit", "PermissionsControl")',

                data: {
                    mode: 'dimension'
                },
                success: function (response) {
                    $("#dimensionAccessGrid").html("");
                    $("#dimensionAccessGrid").html(response);
                }
            });

        } else if (getTabPanelPermissionsAD_SelectedTitle() == 'Роли по станциям') {

            $.ajax({
                type: "GET",
                url: '@Url.Action("OlapAccessGridColumnInit", "PermissionsControl")',

                data: {
                    mode: 'rolestation'
                },
                success: function (response) {
                    $("#rolestationAccessGrid").html("");
                    $("#rolestationAccessGrid").html(response);
                }
            });

        }
<<<<<<< HEAD
=======
		else if (getTabPanelPermissionsAD_SelectedTitle() == 'Аттрибуты измерений') 
        {
            if(initAttribute == 0)
            {
                var height = 500; //calc(100vh - 180px); //500;
	            if (document.getElementById('attributePanel') != null) {
		            height = document.getElementById('attributePanel').clientHeight - 10;
	            }
	            $('#attributePanel').nbisplitter({ height: height, position: '15%' });
	            //$('#attribute-container').nbisplitter({ vertical: false, position: '60%' });
            }
            initAttribute = 1;
            refresh_OLAPattributeOlap();
        }
>>>>>>> loc4
    }
    
    function onClickRefresh() {
         $.ajax({
            url: "@Url.Action("btnRefreshRole_Click", "PermissionsControl")",                        
            success: function () {
                location.reload(true);
            },
            error: function () {
                console.log('Error');
            }
        });
    }
     
    function showRolePopup() {
        var popup = $("#role-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#popup-template"));



        var grid = $("#PermissionsControl").dxDataGrid("instance");
        var sel = grid.getSelectedRowsData();

        if(sel.length > 0){
            popup.show();

            var Name = grid.getSelectedRowsData()[0].Name;
            n_roleId = grid.getSelectedRowsData()[0].Id;

            $('#role-caption')[0].textContent = 'Для роли "' + Name + '" будут скопированы права следующей роли:' ;
        }
    }

    function btnCopyRole_Click(){
       var o_roleId = $("#lbox").dxLookup("instance").option("value");
        
       $.ajax({
            url: "@Url.Action("CopyRole", "PermissionsControl")", 
            data: {
                o_roleId: o_roleId, n_roleId: n_roleId
            },
            success: function () {
              $('#role-popup').dxPopup('hide');
              alert("Скопировано");
            },
            error: function () {
                alert("Ошибка при копирование");
            }
        });
      // alert('Для роли "' + n_roleId + '" будут скопированы права следующей роли: ' + o_roleId);
    }

    function showRolePopupOlapCube() {
        var popup = $("#roleolap-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#olappopup-template"));

        popup.show();
        //$('#roleolap-caption-security')[0].textContent = 'cube';

    }
    /*
    function showRolePopupOlapDimension() {
        var popup = $("#roleolap-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#olappopup-template"));

        popup.show();
        $('#roleolap-caption-security')[0].textContent = 'dimension';

    }
    */
    function btnCopyRoleOlap_Click() {
        debugger;
        //var strMode = $('#roleolap-caption-security')[0].textContent;

        var src_roleId = $("#lboxolapfrom").dxLookup("instance").option("value");
        var dst_roleId = $("#lboxolapto").dxLookup("instance").option("value");
        
       $.ajax({
            url: "@Url.Action("CopyRoleOlap", "PermissionsControl")", 
            data: {
                src_roleId: src_roleId, dst_roleId: dst_roleId
            },
            success: function (res) {
              $('#roleolap-popup').dxPopup('hide');
              alert(res);
              $("#dxPermissionsControlCubeGrid").dxDataGrid("instance").refresh();

              /*
              if(strMode == 'cube')
              {
                  $("#dxPermissionsControlCubeGrid").dxDataGrid("instance").refresh();
              }
              else if (strMode == 'dimension') {
                  $("#dxPermissionsControlDimensionGrid").dxDataGrid("instance").refresh();
              }
              */
            },
            error: function () {
                alert("Ошибка при копировании");
            }
        });
 
    }
    
/*
    function copyRole() {

    }
    */
/*
    function loadOLAPshemaCube() {
        //debugger;
        console.log('label = cube');
    }
  */  
    function refresh_OLAPcube() { 
        //debugger;
        if (!($("#dxPermissionsControlCubeGrid").dxDataGrid("instance") === undefined)) {
            $("#dxPermissionsControlCubeGrid").dxDataGrid("instance").refresh();
        }
    }
    function refresh_OLAPdimension() { 
        //debugger;
        if (!($("#dxPermissionsControlDimensionGrid").dxDataGrid("instance") === undefined)) {
            $("#dxPermissionsControlDimensionGrid").dxDataGrid("instance").refresh();
        }
    }
    function refresh_OLAProlebystation() { 
        //debugger;
        if (!($("#dxPermissionsControlStationGrid").dxDataGrid("instance") === undefined)) {
            $("#dxPermissionsControlStationGrid").dxDataGrid("instance").refresh();
        }
    }

    var columnIndexCube = null;
    var columnIndexCubeOld = null;
<<<<<<< HEAD
=======
	var arr2D;
    var items;
    var items_old;
	
>>>>>>> loc4
    function onCellClickCube(e) {
        debugger;

        if (e.rowType == "data") {

            columnIndexCubeOld = columnIndexCube;
            if(e.columnIndex == columnIndexCubeOld){
                columnIndexCube = null;
            }
            else
            {
                columnIndexCube = e.columnIndex;
            }
            
        }

        if (!($("#dxPermissionsControlCubeGrid").dxDataGrid("instance") === undefined)) {
            $("#dxPermissionsControlCubeGrid").dxDataGrid("instance").repaint();
        }

    }


    function onCellPreparedCube(e) {
        if (e.rowType == "data") {

            if (columnIndexCube != null){
                if(e.columnIndex == columnIndexCube){
                    e.cellElement.css('background', 'LightGray');
                } else {
                    //e.cellElement.css('background', 'white');
                }
            }
            if (columnIndexCubeOld != null) {
                if (e.columnIndex == columnIndexCubeOld) {
                    e.cellElement.css('background', 'white');
                }
            }

        }
    }

<<<<<<< HEAD

=======
	function onContentReadyCube() 
    {
        //debugger;
        //console.log('cube refresh');
        if (!($("#dxPermissionsControlCubeGrid").dxDataGrid("instance") === undefined)) 
        {
            $("#dxPermissionsControlCubeGrid").dxDataGrid("instance").repaint()
        }
    }
	
	function refresh_OLAPattributeOlap() 
    {
        //debugger;
        if (!($("#attributeDimensionList").dxList("instance") === undefined)) 
        {
            $("#attributeDimensionList").dxList("instance").reload();
        }
    }

    // Раскрытие узла
    function attributeOlapTree_createChildren(parent) 
    {
        debugger;
        var ps = parent != null ? parent.selected : true;
        var parentId = parent ? parent.itemData.Id : "";
        var levelId = parent != null ? parent.itemData.Level+1 : 1;
        if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) 
        {
            shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }
        if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) 
        {
            roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }

        var dimensionName = null;
        var sel;
        var hierarhy_seq = null;

        if(parent!=null)
        {
            var objParent = parent.parent;
            hierarhy_seq = parent.itemData.NodeName ; //"ss"; //"?#?"

            while(objParent != null){
            
                hierarhy_seq = hierarhy_seq + "?#?" + objParent.itemData.NodeName;
                objParent = objParent.parent;

            }
        }

        if (!($("#attributeDimensionList").dxList("instance") === undefined)) 
        {
            
            sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
            if (sel != null && sel.length > 0) {
                dimensionName = sel[0].Name
            }
        }
        var ret = 
         $.ajax({
            //url: "@Url.Action("GetHierarchy")",
            url: "@Url.Action("GetHierarchyAttributeOlapTree", "PermissionsControl")",
            async: false,
            cache: false,
            dataType: "json",
            data: {
                parentId: parentId,
                levelId: levelId,
                dimensionName: dimensionName,
                hierarhy_seq: hierarhy_seq,
                maxIdAttribute: maxIdAttribute,
                shemaFileName: shemaFileName,
                roleName: roleName
            }
        });

        if(ret.responseText.includes("Error!")) // && GetHierarchyAttributeOlapTree
        {
            var popup = $("#MessageAccesAtributePopup").dxPopup("instance");
            popup.option("contentTemplate", $("#MessageAccesAtributePopup_template"));
            popup.show();
            $('#message-atribute-info')[0].textContent = "Произошла ошибка при получении данных. См. журнал событий.";
            return;
        }

        var resultJS = JSON.parse(ret.responseText);
        maxIdAttribute = maxIdAttribute + resultJS.length;

        if(resultJS.length>2000) alert("Будет загружено " + resultJS.length + " элементов");

        //Если родитель = false, значит раскрываемые узлы тоже должны быть false!!!
        //Формируем массив old (первоначальное состояние)
        //Формируем resultJS для формирования ret.responseText
        for (var ind = 0; ind < resultJS.length; ind++) 
        {
            items_old[resultJS[ind].Id] = resultJS[ind];
            if(ps == false) 
            {
                resultJS[ind].selected = false;
            }
        }
        //Формируем ret.responseText
        //Формируем ret.responseJSON[ind].selected
        //Возвращаем ret в TreeView
        if (ps == false) 
        {
            ret.responseText = JSON.stringify(resultJS);
            var lenRet = ret.responseJSON.length;
            for(var ind = 0; ind<lenRet; ind++){
                ret.responseJSON[ind].selected = false;
            }
            
        }
        return ret;
    }

    //Установить в false заданный уровень и всех потомков
    function setLevelToFalse(parentId, itemsLF)
    {
        var arrLevel = arr2D[parentId];
        if(arrLevel == null) return;
        var len = arrLevel.length;

        for(var ind = 0; ind<len; ind++)
        {
            itemsLF[arrLevel[ind]].selected = false;
            setLevelToFalse(itemsLF[arrLevel[ind]].Id, itemsLF);
        }
    }

    var mapGen = null;

    //Получить количество дочерних узлов
    function getSizeChildrenNode(e)
    {
        var dimensionName = null;
        var sel;
        var hierarhy_seq = null;
        var shemaFileName;
        var roleName;
        var parentId = e.itemData.Id;
        var levelId = e.itemData.Level+1;
        if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) 
        {
            shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }
        if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) 
        {
            roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }
        if (!($("#attributeDimensionList").dxList("instance") === undefined)) 
        {
            
            sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
            if (sel != null && sel.length > 0) {
                dimensionName = sel[0].Name
            }
        }
        mapGen = null;
        var hierarhy_seq = null;
        if (e != null) 
        {
            var objParent = e.node;
            hierarhy_seq = e.itemData.NodeName;
            while (objParent.parent != null) {
                hierarhy_seq = hierarhy_seq + "?#?" + objParent.parent.itemData.NodeName;
                objParent = objParent.parent;

            }
        }

        var ret = 
                $.ajax({
                url: "@Url.Action("GetSizeСhildrenAttribute", "PermissionsControl")",
                async: false,
                cache: false,
                dataType: "json",
                data: {
                    parentId: parentId,
                    levelId: levelId,
                    dimensionName: dimensionName,
                    hierarhy_seq: hierarhy_seq,
                    shemaFileName: shemaFileName,
                    roleName: roleName
                }
            }).responseText;

        return parseInt(ret, 10); 
    }

    //Продолжение изменения селекта по нажаьтю кнопки "Нет" ( меняем на false узел первого уровня)
    function attributeOlapTreeItemSelectionChanged() 
    {
        //debugger;
        attributeOlapTree_OnItemSelectionChangedExt(eChTmp, true);
    }

    var eChTmp = null;
    //Изменение селекта (вызывается по клику в TreeView)
    function attributeOlapTree_OnItemSelectionChanged(e) 
    {
        eChTmp = e;
        attributeOlapTree_OnItemSelectionChangedExt(e, false);
    }

    //Изменение селекта c добавление флага flAccess (flAccess - показывать окно с вопросом об открытии/закрытии полного доступа)
    function attributeOlapTree_OnItemSelectionChangedExt(e, flAccess) 
    {
        //debugger;
        var level = e.node.itemData.Level;
        var parentId = e.itemData.ParentId;
        var dimensionName = null;
        var sel;

        //Имя выбранного дименшена
        if (!($("#attributeDimensionList").dxList("instance") === undefined)) 
        {
            
            sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
            if (sel != null && sel.length > 0) {
                dimensionName = sel[0].Name
            }
        }

        //Массив айтемов трея
        var itemsCh = null;
        if (!($("#attributeOlapTree").dxTreeView("instance") === undefined)) 
        {
            itemsCh = $("#attributeOlapTree").dxTreeView("instance").option('items');
        }

        var ll = itemsCh.length;
        var map = {};
        arr2D = [];
        //Формирование справочников map и arr2D
        //map - быстрое получение айтема по его ID
        //arr2D - 
        for(var ind = 0; ind<ll; ind++)
        {
            map[itemsCh[ind].Id] = ind;
            var line2D = arr2D[itemsCh[ind].ParentId];

            if (line2D == null){
                arr2D[itemsCh[ind].ParentId] = [];
                arr2D[itemsCh[ind].ParentId][0] = ind;
            } else {
                lenLine2D = line2D.length;
                line2D[lenLine2D] = ind;
            }
        }

        //Открыть/скрыть доступ ко всем элементам?
        if(!flAccess)
        {
            if(e.itemData.selected == true && level == 1 )
            {
                iind = map[e.itemData.Id]; 
                itemsCh[iind].selected = false;
                $("#attributeOlapTree").dxTreeView("instance").option('items', itemsCh);

                showFullAccessAllPopup();
                return;
            }
            else if(e.itemData.selected == false && level == 1 )
            {
                if(!NoViewFullAccessPopup)
                {
                    showFullAccessNonePopup();
                    return;
                }
            }
        }

        //хотим установить в true
        //в true можно установить только узел без потомков
        if(e.itemData.selected == true)
        {
            var iind;
            var size = 0;
            var line2D = arr2D[e.itemData.Id];
            if(line2D != null){
                size = line2D.length;
            }
            if(size<1){
                //Если в 2D нет потомков, делаем запрос через базу
                size = getSizeChildrenNode(e);
            }

            if(size>0){
                //есть дочерние узлы, запрещаем установку true
                iind = map[e.itemData.Id];     
                itemsCh[iind].selected = false;  
            } else {
                //Нет дочерних узлов
                //Можно ставить true
                while(level>1){
                    iind = map[parentId];
                    itemsCh[iind].selected = e.itemData.selected;
                    level = itemsCh[iind].Level;
                    parentId = itemsCh[iind].ParentId;
                }
            }
            
        } 
        else 
        {   //хотим установить в false
            var bExit = false;
            var arrParentThisLevel =  arr2D[parentId];
            // Остались ли селекты = true на своем уровне?
            if(arrParentThisLevel != null){
                var len = arrParentThisLevel.length;
                var cntT = 0;
                for(var ind = 0; ind<len; ind++){
                    if (parentId == itemsCh[arrParentThisLevel[ind]].ParentId && itemsCh[arrParentThisLevel[ind]].selected == true) {
                        cntT++;
                    }
                }
                if(cntT>0){
                    bExit = true;
                }
            }

            //Если селектов = true на своем уровне нет, идем выше
            while(level>1 &&  bExit == false)
            {
                iind = map[parentId];
                var cntT = 0;
                var parentNext = itemsCh[iind].ParentId;
                for(var ind = 0; ind<ll; ind++){
                    if (parentNext == itemsCh[ind].ParentId && itemsCh[ind].selected == true) {
                        cntT++;
                        if(cntT>1){
                            break;
                        }
                    }
                }

                if(cntT>1)
                {
                    bExit = true;
                }
               
                itemsCh[iind].selected = e.itemData.selected;
                level = itemsCh[iind].Level;
                parentId = itemsCh[iind].ParentId;

            }
            //Устанавливаем в false селекты потомков (ниже уровнем)
            setLevelToFalse(e.itemData.Id, itemsCh);
        }

        scipCreateChildren = true;
        $("#attributeOlapTree").dxTreeView("instance").option('items', itemsCh);
        scipCreateChildren = false;

        if (!($("#buttonSave_PermissionAttributeOlap").dxButton("instance") === undefined)) {
            $("#buttonSave_PermissionAttributeOlap").dxButton("instance").option('disabled', checkChangeItems(itemsCh));
        }
 
    }

    function attributeOlapTree_OnContentReady(e) 
    {
        //debugger;
    }

    function attributeOlapTree_TreeViewItemRendered(e) 
    {
        //debugger;
    }

    //Сохранить аттрибуты
    function save_OLAPattributeOlap(e) 
    {
        //debugger;
        var shemaFileName;
        var roleName; 
        var dimensionName;
        var sel;
        var map = {};

        if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
            shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }
        if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
            roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }

        if (!($("#attributeDimensionList").dxList("instance") === undefined)) {
            
            sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
            if(sel!=null && sel.length>0){
                dimensionName = sel[0].Name
            }
        }

        items = null;
        if (!($("#attributeDimensionList").dxList("instance") === undefined)) {
            items = $("#attributeOlapTree").dxTreeView("instance").option('items');
        }

        if(items == null) return;
        var len = items.length;
        var itemsSave = getChangeItemsList(items);
        var exportData = itemsSave;
        var ret ;

        $.ajax({
            type: "POST",
            data: { dimensionName: dimensionName, 
                    shemaFileName: shemaFileName,
                    roleName: roleName,
                    jsonStr: JSON.stringify(exportData) 
            },
            url: '@Url.Action("SaveAttributeOlapPost", "PermissionsControl")',
            success: function (response) {

                if(response == "OK")
                {
                
                    var itemsJson = JSON.stringify(items);
                    var itemsTmp = JSON.parse(itemsJson);
                    items_old = [];
                    items_old.length = 0;
                    for (var ind = 0; ind < itemsTmp.length; ind++) {
                        items_old[itemsTmp[ind].Id] = itemsTmp[ind];
                    }
                    if (!($("#buttonSave_PermissionAttributeOlap").dxButton("instance") === undefined)) {
                        $("#buttonSave_PermissionAttributeOlap").dxButton("instance").option('disabled', true);
                    }
                } 
                else
                {
                    var popup = $("#MessageAccesAtributePopup").dxPopup("instance");
                    popup.option("contentTemplate", $("#MessageAccesAtributePopup_template"));
                    popup.show();
                    $('#message-atribute-info')[0].textContent = response;

                }
            },
            error: function (jqXHR, exception) {
                var itemsJson = JSON.stringify(items);
            }
        });
    }

    var indC = 0;
    var maxIdAttribute = 0;

    //Смена дименшена
    function selectAttributeDimensionStationList(e) 
    {
        //debugger;
        var parentId = null;
        var shemaFileName;
        var roleName; 
        var levelId = 1;
        var dimensionName;
        var sel;
        maxIdAttribute = 0;
        NoViewFullAccessPopup = false;
        getLoadPanelInstance().show();
        if (!($("#cbFullAccesNoneAtribute").dxCheckBox("instance") === undefined)) {
            $("#cbFullAccesNoneAtribute").dxCheckBox("instance").option('value', false);
        }
        if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
            shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }
        if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
            roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
        }

        if (!($("#attributeDimensionList").dxList("instance") === undefined)) {
            
            sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
            if(sel!=null && sel.length>0){
                dimensionName = sel[0].Name
            }
        }

        $.ajax({
        url: "@Url.Action("GetHierarchyAttributeOlapTreeJson", "PermissionsControl")",
        //async: false,
        cache: false,
        beforeSend: function () {
            getLoadPanelInstance().show();
        },
        dataType: "json",
        data: {
            parentId: parentId,
            levelId: levelId,
            dimensionName: dimensionName,
            maxIdAttribute: maxIdAttribute,
            shemaFileName: shemaFileName,
            roleName: roleName
        },
        success: function (response) {
            debugger;
                    
            try
            {
                var resultJS = response;
                var ret = JSON.stringify(resultJS);
                if(resultJS.length>2000) alert("Будет загружено " + resultJS.length + " элементов");

                if(ret.includes("Error!")) // && GetHierarchyAttributeOlapTree
                {
                    var popup = $("#MessageAccesAtributePopup").dxPopup("instance");
                    popup.option("contentTemplate", $("#MessageAccesAtributePopup_template"));
                    popup.show();
                    $('#message-atribute-info')[0].textContent = "Произошла ошибка при получении данных. См. журнал событий.";
                    return;
                }

                maxIdAttribute = resultJS.length;

                //"Разводим" основной массив и массив old
                var resultJSforOld = JSON.parse(ret);
                items_old = [];
                items_old.length = 0;

                for (var ind = 0; ind < resultJSforOld.length; ind++) {

                    items_old[resultJSforOld[ind].Id] = resultJSforOld[ind];
                }

                if (!($("#attributeOlapTree").dxTreeView("instance") === undefined)) 
                {
                    $("#attributeOlapTree").dxTreeView("instance").option('items', resultJS);
                    //$("#attributeOlapTree").dxTreeView("instance").repaint(); //####
                }
       
                if (!($("#buttonSave_PermissionAttributeOlap").dxButton("instance") === undefined)) 
                {
                    $("#buttonSave_PermissionAttributeOlap").dxButton("instance").option('disabled', true);
                }
            }
            catch(err)
            {

            }
            finally
            {
                getLoadPanelInstance().hide();
            }
        },
        error: function (response) {
            getLoadPanelInstance().hide();
        }
    });

    }

    //Проверка, есть ли изменения:
    //Есть ли расхождения в основном массиве и массиве old?
    function checkChangeItems(items) 
    {
        var len = items.length;
        var lenOld = items_old.length;

        if ((len+1) != lenOld) return false;

        for (var ind = 0; ind < len; ind++) {
            var itemOld = items_old[items[ind].Id];
            if(itemOld == null) return false;
            if (itemOld.selected != items[ind].selected) return false;
        }
        return true;
    }

   
    function getItemPath(items, index)
    {
        if (mapGen==null){
            mapGen = {};
            var len = items.length;
            for(var ind = 0; ind<len; ind++){
                mapGen[items[ind].Id] = ind;
            }
        }

        var strPatch = items[index].NodeName;
        var parentId = items[index].ParentId;
        var level = items[index].Level;

        while(level>1){
            strPatch = items[mapGen[parentId]].NodeName + "##XX##" + strPatch;
            level = items[mapGen[parentId]].Level;
            parentId = items[mapGen[parentId]].ParentId;
        }
        return strPatch;
    }


    //Список атрибутов, которые были изменены
    function getChangeItemsList(items) 
    {
        //debugger;
        var itemsSave = [];
        var itemsSaveIndex = 0;
        var len = items.length;
        var lenOld = items_old.length
        var chng = [];
        var chngIndex = 0;
        mapGen = null;

        for (var ind = 0; ind < len; ind++) {
            
            var itemOld = items_old[items[ind].Id];
            if(itemOld == null) continue;
            if(itemOld.selected == items[ind].selected) continue;

            var strPatch = getItemPath(items, ind); 
            var itemChng = {
                attributePatch: strPatch,
                selected: items[ind].selected
            };

            chng[chngIndex++] = itemChng;
        }

        var lenChng = chng.length;
        //Отфильтровываем лишние (более близкие к корню)
        /*
        for (var ind = 0; ind < lenChng; ind++) {
            if(chng[ind].attributePatch == "") continue;
            for (var ind2 = 0; ind2 < lenChng; ind2++) {
                if(ind == ind2) continue;
                if(chng[ind2].attributePatch == "") continue;
                if(chng[ind2].attributePatch.indexOf(chng[ind].attributePatch) != -1 )
                {
                    if(chng[ind].selected == true && chng[ind2].selected == true){
                        chng[ind].attributePatch = "";
                        break;
                    }
                    if (chng[ind].selected == false && chng[ind2].selected == false) {
                        chng[ind2].attributePatch = "";
                        break;
                    }
                }

            }
        }
        */

        //Упаковываем для передачи на сервер
        for (var ind = 0; ind < lenChng; ind++) 
        {
            if(chng[ind].attributePatch == "") continue;

            var itemSave = {
                            IsExpanded:false,
                            IsSelected:false,
                            Id:0,
                            ParentId:0,
                            NodeName:chng[ind].attributePatch,
                            Level:0,
                            Attribute1:null,
                            Attribute2:null,
                            selected:chng[ind].selected,
                            InverseParent:null,
                            expanded:true
            };

            itemsSave[itemsSaveIndex++] = itemSave;
        }

        return itemsSave;
    }


    function showFullAccessAllPopup() 
    {
        //debugger;
        var popup = $("#FullAccesAllAtributePopup").dxPopup("instance");
        popup.option("contentTemplate", $("#FullAccesAllAtributePopup_template"));
        popup.show();
    }


    function showFullAccessNonePopup() 
    {
        //debugger;
        var popup = $("#FullAccesNoneAtributePopup").dxPopup("instance");
        popup.option("contentTemplate", $("#FullAccesNoneAtributePopup_template"));
        popup.show();
    }

    function cbFullAccesNoneAtribute_ValueChanged() 
    {
        if (!($("#cbFullAccesNoneAtribute").dxCheckBox("instance") === undefined)) {
            NoViewFullAccessPopup = $("#cbFullAccesNoneAtribute").dxCheckBox("instance").option('value');
        }
        
    }

    //Открытие полного доступа к атрибутам
    function btnFullAccesAllAtributeYes_Click() 
    {
        //debugger;
        $('#FullAccesAllAtributePopup').dxPopup('hide');
	    var parentId = null;
	    var shemaFileName;
	    var roleName;
        var levelId = 1;
        var dimensionName;
        var sel;

	    if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
		    shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
	    }
	    if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
		    roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
	    }

	    if (!($("#attributeDimensionList").dxList("instance") === undefined)) {
		
		    sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
		    if(sel!=null && sel.length>0){
			    dimensionName = sel[0].Name
		    }
	    }

        var ret = 
	     $.ajax({
		    url: "@Url.Action("SetFullAccessAllToAttribute", "PermissionsControl")",
		    async: false,
		    cache: false,
		    dataType: "json",
		    data: {
			    parentId: parentId,
			    levelId: levelId,
			    dimensionName: dimensionName,
			    maxIdAttribute: maxIdAttribute,
			    shemaFileName: shemaFileName,
			    roleName: roleName
		    }
	    }).responseText;

        if(ret != "OK") 
        {
            var popup = $("#MessageAccesAtributePopup").dxPopup("instance");
            popup.option("contentTemplate", $("#MessageAccesAtributePopup_template"));
            popup.show();
            $('#message-atribute-info')[0].textContent = ret;
            return;

        }

        if (!($("#attributeOlapTree").dxTreeView("instance") === undefined)) {
            var items = $("#attributeOlapTree").dxTreeView("instance").option('items');

            for (var ind = 0; ind < items.length; ind++) 
            {
                items[ind].selected = true;
                items_old[items[ind].Id].selected = true;
            }

            $("#attributeOlapTree").dxTreeView("instance").option('items', items);
            $("#attributeOlapTree").dxTreeView("instance").repaint();

        }

        if (!($("#buttonSave_PermissionAttributeOlap").dxButton("instance") === undefined)) {
		    $("#buttonSave_PermissionAttributeOlap").dxButton("instance").option('disabled', true);
	    }
    }


    //Закрытие полного доступа к атрибутам
    function btnFullAccesNoneAtributeYes_Click() 
    {
        //debugger;
        $('#FullAccesNoneAtributePopup').dxPopup('hide');
	    var parentId = null;
	    var shemaFileName;
	    var roleName; 
        var levelId = 1;
	    var dimensionName;
	    var sel;


	    if (!($("#shemafiles_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
		    shemaFileName = $('#shemafiles_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
	    }
	    if (!($("#role_PermissionAttributeOlap").dxSelectBox("instance") === undefined)) {
		    roleName = $('#role_PermissionAttributeOlap').dxSelectBox("instance").option("displayValue");
	    }

	    if (!($("#attributeDimensionList").dxList("instance") === undefined)) {
		
		    sel = $("#attributeDimensionList").dxList("instance").option('selectedItems');
		    if(sel!=null && sel.length>0){
			    dimensionName = sel[0].Name
		    }
	    }

        var ret = 
	     $.ajax({
		    url: "@Url.Action("SetFullAccessNoneToAttribute", "PermissionsControl")",
		    async: false,
		    cache: false,
		    dataType: "json",
		    data: {
			    parentId: parentId,
			    levelId: levelId,
			    dimensionName: dimensionName,
			    maxIdAttribute: maxIdAttribute,
			    shemaFileName: shemaFileName,
			    roleName: roleName
		    }
	    }).responseText;

        if(ret != "OK") 
        {
            var popup = $("#MessageAccesAtributePopup").dxPopup("instance");
            popup.option("contentTemplate", $("#MessageAccesAtributePopup_template"));
            popup.show();
            $('#message-atribute-info')[0].textContent = ret;
            return;

        }

        if (!($("#attributeOlapTree").dxTreeView("instance") === undefined)) {
            var items = $("#attributeOlapTree").dxTreeView("instance").option('items');

            for (var ind = 0; ind < items.length; ind++) 
            {
                items[ind].selected = false;
                items_old[items[ind].Id].selected = false;
            }

            $("#attributeOlapTree").dxTreeView("instance").option('items', items);
            $("#attributeOlapTree").dxTreeView("instance").repaint();
        }

        if (!($("#buttonSave_PermissionAttributeOlap").dxButton("instance") === undefined)) {
		    $("#buttonSave_PermissionAttributeOlap").dxButton("instance").option('disabled', true);
	    }
    }
>>>>>>> loc4

</script>

@(
Html.DevExtreme().TabPanel()
    .ID("PermissionsAD_TabPanel")
    .OnSelectionChanged("OnSelectionChanged_PermissionsAD_TabPanel")
    .Items(items =>
    {
        items.Add()
                .Title("Роли")
                .Template(new TemplateName("gridContainer-roles"))

                //.Option("tabExtras", new { userId = new JS("data.Id") })
                ;

        items.Add()
            .Title("Компоненты")
            .Template(new TemplateName("gridContainer-components"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;

        items.Add()
            .Title("Права доступа")
            .Template(new TemplateName("gridContainer-eccessRights"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;

        items.Add()
            .Title("Роли<->Отчеты")
            .Template(new TemplateName("gridContainer-rolesReports"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;

        items.Add()
            .Title("Роли<->Аналитические панели")
            .Template(new TemplateName("gridContainer-analyticsPanels"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;
        if (!AppHelper.CheckOwner(HomeController.Owner, AppHelper.OwnerType.Rosatom))
        {
            items.Add()
            .Title("Показатели на форме")
            .Template(new TemplateName("gridContainer-inFormValues"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;
        }
        items.Add()
            .Title("Вход под другим пользователем")
            .Template(new TemplateName("gridContainer-workAsAnotherUser"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;
        
        items.Add()
        .Title("Доступ к кубам")
        .Template(new TemplateName("cubeAccess"))
    //.Option("tabExtras", new { userId = new JS("data.Id") })
        ;
        items.Add()
        .Title("Доступ к измерениям")
        .Template(new TemplateName("dimensionAccess"))
        //.Option("tabExtras", new { userId = new JS("data.Id") })
        ;
<<<<<<< HEAD
        items.Add()
            .Title("Роли по станциям")
            .Template(new TemplateName("rolestationAccess"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
            ;
=======
        //items.Add()
        //    .Title("Роли по станциям")
        //    .Template(new TemplateName("rolestationAccess"))
            //.Option("tabExtras", new { userId = new JS("data.Id") })
        //    ;
		items.Add()
        .Title("Аттрибуты измерений")
        .Template(new TemplateName("attributeolapAccess")) 
        ;
>>>>>>> loc4

    })
)

@using (Html.DevExtreme().NamedTemplate("gridContainer-roles"))
{
    @(Html.DevExtreme().Button().ID("btnRefreshRole").Text("Обновить роли из AD").OnClick("onClickRefresh")) 
    @(Html.DevExtreme().Button().ID("btnCopyRoleShow").Text("Копировать права доступа").OnClick("showRolePopup"))
    @(Html.Emas().DataGrid<RoleDTO>()
                .ID("PermissionsControl")
                .ApplyConfiguration("dictionary.lite")
                .Height("calc(100vh - 180px)")
                .Width("70%")
                .OnContentReady("checkIsAD")
                .ShowBorders(true)
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)

                )
                .HeaderFilter(headerFilter => headerFilter.Visible(true))
                .Paging(paging => paging.PageSize(100))
                .Pager(pager =>
                {
                    pager.ShowPageSizeSelector(true);
                    pager.AllowedPageSizes(new List<int>{ 10, 20, 50, 100, 200 });
                    pager.ShowInfo(true);
                })
                .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("RolesInit")
                    .InsertAction(!@ViewBag.IsAD ? "RoleInsert":null)
                    .UpdateAction(!@ViewBag.IsAD ? "RoleUpdate":null)
                    .DeleteAction(!@ViewBag.IsAD ? "RoleDelete":null)
                    .Key("Id")
                )
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Popup)
                        .Popup(p => p
                        .Width(600)
                        .Height(300)
                        .ShowTitle(true).Title("Роль")
                        )
                    .Form(f => f
                    .ColCount(1)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.Name);
                        items.AddSimpleFor(m => m.Description);
                    })
                    .LabelLocation(FormLabelLocation.Left)
                    .ShowColonAfterLabel(true)
                    .MinColWidth(100)
                    .ShowValidationSummary(true)
                    );
                    editing.AllowAdding(!@ViewBag.IsAD);
                    editing.AllowDeleting(!@ViewBag.IsAD);
                    editing.AllowUpdating(!@ViewBag.IsAD);
                    editing.UseIcons(true);
                })
                .Columns(columns =>
                {
                    columns.AddFor(r => r.Name)
                        .Alignment(HorizontalAlignment.Left)
                        .Width("70%")
                        .ValidationRules(x => x.AddRequired())
                        .Caption("Название роли");

                    columns.AddFor(r => r.Description)
                        .Alignment(HorizontalAlignment.Left)
                        .Width("70%")
                        .Caption("Описание");
                }).Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Standard))

    )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-components"))
{
    @(Html.Emas().DataGrid<WebPluginDTO>()
            .ID("WebPluginsGrid")
            .ApplyConfiguration("dictionary.lite")
            .Height("calc(100vh - 180px)")
                .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)

                )

                    .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("WebPluginsInit")
                    .InsertAction("WebPluginInsert")
                    .UpdateAction("WebPluginUpdate")
                    .DeleteAction("WebPluginDelete")

                    .Key("Id")
                )
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Popup)
                        .Popup(p => p
                        .Width(750)
                        .Height(650)
                            .ShowTitle(true).Title("Компонент")
                        )
                    .Form(f => f
                    .ColCount(1)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.Name);
                        items.AddSimpleFor(m => m.Parentid).Editor(editor => editor.Lookup());
                        items.AddSimpleFor(m => m.Caption);
                        items.AddSimpleFor(m => m.Viewname);
                        items.AddSimpleFor(m => m.Sortorder);
                        items.AddSimpleFor(m => m.Ismenubar).Editor(editor => editor.CheckBox());
                        items.AddSimpleFor(m => m.Isnavigationbar).Editor(editor => editor.CheckBox());
                        items.AddSimpleFor(m => m.Issecret).Editor(editor => editor.CheckBox());
                        items.AddSimpleFor(m => m.Trial).Editor(editor => editor.CheckBox());
                        items.AddSimpleFor(m => m.Isadmin).Editor(editor => editor.CheckBox());
                        items.AddSimpleFor(m => m.Updatedate).Editor(editor => editor.DateBox()
                                                                         .Type(DateBoxType.Date)
                                                                         .DateSerializationFormat("yyyy-MM-dd"));
                    })
                    .LabelLocation(FormLabelLocation.Left)
                    .ShowColonAfterLabel(true)
                    .MinColWidth(100)
                    .ShowValidationSummary(true)
                    );
                    editing.AllowAdding(true);
                    editing.AllowDeleting(true);
                    editing.AllowUpdating(true);
                    editing.UseIcons(true);
                })
                .Columns(columns =>
                {
                    columns.AddFor(wp => wp.Name)
                    .Caption("Компонент");

                    columns.AddFor(wp => wp.Parentid)
                        .Lookup(lookup => lookup
                        .DataSource(d => d.Mvc()
                        .Controller("PermissionsControl")
                        .LoadAction("SdsParentsWebplugins")
                        .Key("Id"))
                        .ValueExpr("Id")
                        .DisplayExpr("Name")
                        )
                    .Caption("Родительский компонент")
                    .ValidationRules(x => x.AddRequired())
                    ;

                    columns.AddFor(wp => wp.Caption)
                    .Width("15%")
                    .Caption("Заголовок компонента");

                    columns.AddFor(wp => wp.Viewname)
                    .Width("25%")
                    .Caption("Путь");

                    columns.AddFor(wp => wp.Sortorder)
                    .Width("5%")
                    .Caption("Сортировка");

                    columns.AddFor(wp => wp.Ismenubar)
                     .Alignment(HorizontalAlignment.Center)
                     .Width("5%")
                     .Caption("В меню");

                    columns.AddFor(wp => wp.Isnavigationbar)
                     .Alignment(HorizontalAlignment.Center)
                     .Width("5%")
                     .Caption("В панели навигации");

                    columns.AddFor(wp => wp.Issecret)
                     .Alignment(HorizontalAlignment.Center)
                     .Width("5%")
                     .Caption("Коммерческая тайна");

                    columns.AddFor(wp => wp.Trial)
                     .Alignment(HorizontalAlignment.Center)
                     .Width("5%")
                     .Caption("Ознакомительная версия");

                    columns.AddFor(wp => wp.Isadmin)
                     .Alignment(HorizontalAlignment.Center)
                     .Width("5%")
                     .Caption("Административный");

                    columns.AddFor(wp => wp.Updatedate)
                     .Alignment(HorizontalAlignment.Center)
                     .Caption("Дата обновления")
                     .Width("10%")
                     .DataType(GridColumnDataType.Date)
                     ;

                })
        )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-eccessRights"))
{
          
    @(
        Html.Emas().DataGrid<RolesWebPluginsDTO>()
        .ID("AccessRightsStateGrid")
        .ApplyConfiguration("dictionary.lite")
                .OnEditorPreparing("eccessRightsGridStateChanged")
        .Height("calc(100vh - 180px)")
                .FilterRow(filterRow => filterRow
                    .Visible(true)
                    .ApplyFilter(GridApplyFilterMode.Auto))
                .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("RolesWebPluginsInit")
                    .InsertAction("RolesWebPluginsInsert")
                    .UpdateAction("RolesWebPluginsUpdate")
                    .DeleteAction("RolesWebPluginsDelete")
                    .Key("Id"))
                .Editing(editing =>
                {
                    editing.Mode(GridEditMode.Popup)
                        .Popup(p => p
                            .Width(750)
                            .Height(450)
                                .ShowTitle(true).Title("Права доступа")
                        )
                        .Form(f => f
                            .ColCount(1)
                            .Items(items =>
                            {
                                items.AddSimpleFor(m => m.Roleid).Editor(editor => editor.Lookup());
                                items.AddSimpleFor(m => m.Webpluginid).Editor(editor => editor.Lookup());
                                items.AddSimpleFor(m => m.IsFullControl).Editor(editor => editor.CheckBox().ID("IsFullControlCBX"));
                                items.AddSimpleFor(m => m.IsCreate).Editor(editor => editor.CheckBox().ID("IsCreateCBX"));
                                items.AddSimpleFor(m => m.IsEdit).Editor(editor => editor.CheckBox().ID("IsEditCBX"));
                                items.AddSimpleFor(m => m.IsDelete).Editor(editor => editor.CheckBox().ID("IsDeleteCBX"));
                                items.AddSimpleFor(m => m.IsApprove).Editor(editor => editor.CheckBox().ID("IsApproveCBX"));
                            })
                            .LabelLocation(FormLabelLocation.Left)
                            .ShowColonAfterLabel(true)
                            .MinColWidth(100)
                            .ShowValidationSummary(true)
                        );
                    editing.AllowAdding(true);
                    editing.AllowDeleting(true);
                    editing.AllowUpdating(true);
                    editing.UseIcons(true);
                })
                .Columns(columns =>
                {
                    columns.AddFor(wp => wp.Roleid)
                        .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("RolesInit").Key("Id"))
                        .ValueExpr("Id")
                        .DisplayExpr("Name"))
                        .Caption("Роль");

                    columns.AddFor(wp => wp.Webpluginid)
                        .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("SdsParentsWebplugins").Key("Id"))
                        .ValueExpr("Id")
                        .DisplayExpr("Caption"))
                        .Caption("Компонент");

                    columns.AddFor(wp => wp.IsFullControl)
                        .Alignment(HorizontalAlignment.Center)
                        .Width("5%")
                        .Caption("Полный доступ");

                    columns.AddFor(wp => wp.IsCreate)
                        .Alignment(HorizontalAlignment.Center)
                        .Width("5%")
                        .Caption("Создание");

                    columns.AddFor(wp => wp.IsEdit)
                        .Alignment(HorizontalAlignment.Center)
                        .Width("5%")
                        .Caption("Редактирование");

                    columns.AddFor(wp => wp.IsDelete)
                        .Alignment(HorizontalAlignment.Center)
                        .Width("5%")
                        .Caption("Удаление");

                    columns.AddFor(wp => wp.IsApprove)
                        .Alignment(HorizontalAlignment.Center)
                        .Width("5%")
                        .Caption("Визирование");
                })
        )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-rolesReports"))
{
    @(Html.Emas().DataGrid<ReportsRolesDTO>()
    .ID("ReportRolesGrid")
    .ApplyConfiguration("dictionary.lite")     
    .Height("calc(100vh - 180px)")
        .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
        )

        .DataSource(d => d.Mvc()
        .Controller("PermissionsControl")
        .LoadAction("ReportsRolesInit")
        .InsertAction("ReportsRolesInsert")
        .UpdateAction("ReportsRolesUpdate")
        .DeleteAction("ReportsRolesDelete")

        .Key("Id")
        )
       .Editing(editing =>
       {
           editing.Mode(GridEditMode.Popup)
               .Popup(p => p
               .Width(750)
               .Height(250)
                   .ShowTitle(true).Title("Права на отчет")
               )
               .Form(f => f
               .ColCount(1)
               .Items(items =>
                {
                    items.AddSimpleFor(m => m.Reportid).Editor(editor => editor.Lookup());
                    items.AddSimpleFor(m => m.Roleid).Editor(editor => editor.Lookup());
                })
               .LabelLocation(FormLabelLocation.Left)
               .ShowColonAfterLabel(true)
               .MinColWidth(100)
               .ShowValidationSummary(true)
           );
           editing.AllowAdding(true);
           editing.AllowDeleting(true);
           editing.AllowUpdating(true);
           editing.UseIcons(true);
       })
        .Columns(columns =>
        {
            columns.AddFor(wp => wp.Reportid)
            .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("ReportsInit").Key("Id"))
            .ValueExpr("Id")
            .DisplayExpr("Name"))
            .Caption("Отчет");

            columns.AddFor(wp => wp.Roleid)
            .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("RolesInit").Key("Id"))
            .ValueExpr("Id")
            .DisplayExpr("Name"))
            .Caption("Роль");
        })
        )

}

@using (Html.DevExtreme().NamedTemplate("gridContainer-analyticsPanels"))
{
    @(Html.Emas().DataGrid<DashRoleDashboardDTO>()
        .ID("DashboardRolesGrid")
        .ApplyConfiguration("dictionary.lite") 
        .Height("calc(100vh - 180px)")
            .FilterRow(filterRow => filterRow
            .Visible(true)
            .ApplyFilter(GridApplyFilterMode.Auto)
            )

            .DataSource(d => d.Mvc()
            .Controller("PermissionsControl")
            .LoadAction("DashboardsRolesInit")
            .InsertAction("DashboardsRolesInsert")
            .UpdateAction("DashboardsRolesUpdate")
            .DeleteAction("DashboardsRolesDelete")

            .Key("Id")
            )
           .OnEditingStart("onEditingStart")
           .Editing(editing =>
           {
               editing.Mode(GridEditMode.Popup)
                   .Popup(p => p
                        .Width(750)
                        .Height(250).ShowTitle(true).OnShowing("setPopupTitle")
                   )
                   .Form(f => f
                   .ColCount(1)
                   .Items(items =>
                    {
                        items.AddSimpleFor(m => m.DashboardId).Editor(editor => editor.Lookup());
                        items.AddSimpleFor(m => m.RoleId).Editor(editor => editor.Lookup());
                    })
                   .LabelLocation(FormLabelLocation.Left)
                   .ShowColonAfterLabel(true)
                   .MinColWidth(100)
                   .ShowValidationSummary(true)
               );
               editing.AllowAdding(true);
               editing.AllowDeleting(true);
               editing.AllowUpdating(true);
               editing.UseIcons(true);
           })
            .Columns(columns =>
            {
                columns.AddFor(wp => wp.RoleId)
                 .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("RolesInit").Key("Id"))
                 .ValueExpr("Id")
                 .DisplayExpr("Name"))
                 .Caption("Роль");
                columns.AddFor(wp => wp.DashboardId)
                 .Lookup(lookup => lookup.DataSource(d => d.Mvc().Controller("PermissionsControl").LoadAction("DashboardsInit").Key("Id"))
                 .ValueExpr("Id")
                 .DisplayExpr("Caption"))
                 .Caption("Аналитическая панель");

            })
            )
}
@using (Html.DevExtreme().NamedTemplate("gridContainer-inFormValues"))
{
        @(Html.Emas().DataGrid<WebPluginIndicator>()
            .ID("WebPluginIndicatorGrid")
            .ApplyConfiguration("dictionary.lite")
            .Height("calc(100vh - 180px)")
            .FilterRow(filterRow => filterRow
                        .Visible(true)
                        .ApplyFilter(GridApplyFilterMode.Auto))

            .DataSource(d => d.Mvc()
                        .Controller("PermissionsControl")
                        .LoadAction("WebPluginIndicatorInit")
                        .InsertAction("WebPluginIndicatorInsert")
                        .UpdateAction("WebPluginIndicatorUpdate")
                        .DeleteAction("WebPluginIndicatorDelete")
                        .Key("Id")
                    )
           .OnEditingStart("onEditingStart")
           .Editing(editing =>
           {
               editing.Mode(GridEditMode.Popup)
                   .Popup(p => p
                        .Width(750)
                        .Height(250).ShowTitle(true).OnShowing("setPopupTitle")
                   );

               editing.AllowAdding(true);
               editing.AllowDeleting(true);
               editing.AllowUpdating(true);
               editing.UseIcons(true);
           })
            .Columns(columns =>
            {
                columns.AddFor(wp => wp.Name)
                       .Caption("Показатель");
                columns.AddFor(wp => wp.Caption)
                      .Caption("Заголовок");
                columns.AddFor(wp => wp.Webpluginid)
                        .Lookup(lookup => lookup
                                                .DataSource(d => d.Mvc()
                                                            .Controller("PermissionsControl")
                                                            .LoadAction("LookupWebPlugins")
                                                            .Key("Id"))
                                                            .ValueExpr("Id")
                                                            .DisplayExpr("Name")
                                                )
                      .Caption("Компонент");
                columns.AddFor(wp => wp.Isactive)
                      .Caption("Виден");
            })
            )
}

@using (Html.DevExtreme().NamedTemplate("gridContainer-workAsAnotherUser"))
{
    @(Html.DevExtreme().SelectBox()
                           .DataSource(d => d.Mvc()
                                           .Controller("PermissionsControl")
                                           .LoadAction("GetUsers")
                                           .Key("Name")
                                       )
                           .ValueExpr("Name")
                           .DisplayExpr("Name")
                           .ID("permissionOtherUserSelectBox")
                           .DropDownOptions(o => o.Width(800))
                           .Width("800px")
                           .Placeholder("")
                           .OnValueChanged("onUserChanged")
        )
}

@(Html.DevExtreme().Popup()
    .ID("role-popup")
    .Width(600)
    .Height(200)
    .ShowTitle(true)
    .Title("Копировать права доступа")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("popup-template"))
{
    <div id="role-caption">Для роли "" будут скопированы права следующей роли: </div>
    <br />

    @(Html.DevExtreme().Lookup()
                .ID("lbox")
                 .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("RolesInit")
                    .Key("Id"))
                    .ValueExpr("Id")
                    .DisplayExpr("Name")
     ) 
     <br />
     <br />
     <table>
        <tr>
             <td>
    @(Html.DevExtreme().Button()
    .ID("btnCopyRole")
    .Text("Копировать")
    .OnClick("btnCopyRole_Click")
    )
             </td>
             <td>
    @(Html.DevExtreme().Button()
    .ID("btnCanselRole")
    .Text("Отмена")
    .OnClick("function() { $('#role-popup').dxPopup('hide'); }")
    )
             </td>

         </tr>
     </table>
   

   
}

@(Html.DevExtreme().Popup()
    .ID("roleolap-popup")
    .Width(600)
    .Height(270)
    .ShowTitle(true)
    .Title("Копировать права доступа")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("olappopup-template"))
{
    <div id="roleolap-caption-security" style="display:none;">c</div>
    <div id="roleolap-caption-from">Будут скопированы права доступа из роли:</div>
    <br />

    @(Html.DevExtreme().Lookup()
                .ID("lboxolapfrom")
                 .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("RolesInit")
                    .Key("Id"))
                    .ValueExpr("Id")
                    .DisplayExpr("Name")
     ) 
     <br />
     <div id="roleolap-caption-from">в роль:</div>
     <br />
     @(Html.DevExtreme().Lookup()
                .ID("lboxolapto")
                 .DataSource(d => d.Mvc()
                    .Controller("PermissionsControl")
                    .LoadAction("RolesInit")
                    .Key("Id"))
                    .ValueExpr("Id")
                    .DisplayExpr("Name")
     ) 

     <br />
     <br />
     <table>
        <tr>
             <td>
    @(Html.DevExtreme().Button()
    .ID("btnCopyRoleOlap")
    .Text("Копировать")
    .OnClick("btnCopyRoleOlap_Click")
    )
             </td>
             <td>
    @(Html.DevExtreme().Button()
    .ID("btnCancelRoleOlap")
    .Text("Отмена")
    .OnClick("function() { $('#roleolap-popup').dxPopup('hide'); }")
    )
             </td>

         </tr>
     </table>
   

   
}

@using (Html.DevExtreme().NamedTemplate("cubeAccess"))
{
<<<<<<< HEAD
    /*
=======
    
>>>>>>> loc4
    <table class="form">
        <tr>
            <td class="form-td">
                OLAP схема:
            </td>
            <td class="form-td">
                @(
                    Html.DevExtreme().SelectBox().DataSource(d => d.Mvc().Controller("PermissionsControl")
                    .LoadAction("GetShemaFilePathList").Key("Key")).ValueExpr("Key").DisplayExpr("Value").ID("shemafiles_PermissionCube")
                    .Width("400px")
                    .DropDownOptions(o => o.Width(350)).Value(0)
                    )
            </td>
            <td class="form-td" valign="bottom">
                @(Html.DevExtreme().Button()
                    .ID("buttonRefresh_PermissionCube")
                    .Text("Применить")
                        .OnClick("refresh_OLAPcube")
                 )
            </td>
            <td class="form-td">
                @(Html.DevExtreme().Button()
                    .ID("buttonCopyRole_PermissionCube")
                    .Text("Копировать права доступа")
                    .OnClick("showRolePopupOlapCube")
                    )

            </td>

        </tr>
    </table>
<<<<<<< HEAD
    */
=======
    
>>>>>>> loc4
     <div id=cubeAccessGrid></div>
}

@using (Html.DevExtreme().NamedTemplate("dimensionAccess"))
{
<<<<<<< HEAD
    /*
=======
    
>>>>>>> loc4
    <table class="form">
        <tr>
            <td class="form-td">
                OLAP схема:
            </td>
            <td class="form-td">
                @(
                    Html.DevExtreme().SelectBox().DataSource(d => d.Mvc().Controller("PermissionsControl")
                    .LoadAction("GetShemaFilePathList").Key("Key")).ValueExpr("Key").DisplayExpr("Value").ID("shemafiles_PermissionDimension")
                    .Width("400px")
                    .DropDownOptions(o => o.Width(350)).Value(0)
                    )
            </td>
            <td class="form-td" valign="bottom">
                @(Html.DevExtreme().Button()
                    .ID("buttonRefresh_PermissionDimension")
                    .Text("Применить")
                    .OnClick("refresh_OLAPdimension")
                    )
            </td>
        </tr>
    </table>
<<<<<<< HEAD
    */
=======
    
>>>>>>> loc4
    <div id=dimensionAccessGrid></div>
}

@using (Html.DevExtreme().NamedTemplate("rolestationAccess"))
{
    /*
    <table class="form">
        <tr>
            <td class="form-td">
                OLAP схема:
            </td>
            <td class="form-td">
                @(
                    Html.DevExtreme().SelectBox().DataSource(d => d.Mvc().Controller("PermissionsControl")
                    .LoadAction("GetShemaFilePathList").Key("Key")).ValueExpr("Key").DisplayExpr("Value").ID("shemafiles_PermissionRolebystation")
                    .Width("400px")
                    .DropDownOptions(o => o.Width(350)).Value(0)
                    )
            </td>
            <td class="form-td" valign="bottom">
                @(Html.DevExtreme().Button()
                    .ID("buttonRefresh_PermissionRolebystation")
                    .Text("Применить")
                    .OnClick("refresh_OLAProlebystation")
                    )
            </td>
        </tr>
    </table>
    */
    <div id=rolestationAccessGrid></div>
<<<<<<< HEAD
=======
}

@using (Html.DevExtreme().NamedTemplate("attributeolapAccess"))
{
    <table class="form">
        <tr>
            <td class="form-td">
                OLAP схема:
            </td>
            <td class="form-td">
                @(
                    Html.DevExtreme().SelectBox().DataSource(d => d.Mvc().Controller("PermissionsControl")
                    .LoadAction("GetShemaFilePathList").Key("Key")).ValueExpr("Key").DisplayExpr("Value").ID("shemafiles_PermissionAttributeOlap")
                    .Width("400px")
                    .DropDownOptions(o => o.Width(350)).Value(0)
                    )
            </td>

            <td class="form-td">
                Роль:
            </td>
            <td class="form-td">
                @(
                    Html.DevExtreme().SelectBox().DataSource(d => d.Mvc().Controller("PermissionsControl")
                    .LoadAction("GetRoleDictionary").Key("Key")).ValueExpr("Key").DisplayExpr("Value").ID("role_PermissionAttributeOlap")
                    .Width("400px")
                    .DropDownOptions(o => o.Width(350)).Value(0)
                    )
            </td>
            <td class="form-td" valign="bottom">
                @(Html.DevExtreme().Button()
                    .ID("buttonRefresh_PermissionAttributeOlap")
                    .Text("Применить")
                    .OnClick("refresh_OLAPattributeOlap")
                    )
            </td>
            <td class="form-td" valign="bottom">
                @(Html.DevExtreme().Button()
                    .ID("buttonSave_PermissionAttributeOlap")
                    .Text("Сохранить")
                    .OnClick("save_OLAPattributeOlap")
                    )
            </td>
        </tr>
        <tr>

        </tr>
    </table>

    <div id="attributePanel" style="height: 97%; margin-top: 10px; border: 1px solid #a1bada;">
        <div class="dimension-container" style="width:  auto; height: 95%; padding: 3px 10px; border: 1px;">
           
                @(Html.DevExtreme().List()
                    .ID("attributeDimensionList")
                    .ShowSelectionControls(true)
                    .SelectionMode(ListSelectionMode.Single)
                    .DataSource(m => m.Mvc()
                        .Controller("PermissionsControl")
                        .LoadAction("GetDimensionList")
                        .LoadParams(
                            new
                            {
                                shemafile = new JS("function() { return $('#shemafiles_PermissionAttributeOlap').dxSelectBox(\"instance\").option(\"displayValue\"); }")
                            }
                        )
                        .Key("Id")
                    )
                    .DataSourceOptions(p => p.Paginate(false))
                    .DisplayExpr("Name")
                    .ShowSelectionControls(true)
                    .OnSelectionChanged("selectAttributeDimensionStationList")
                )
               
        </div>
        <div id="attribute-container" style="width: auto; height: 97%; padding: 3px 10px; border: 3px;">
            <div id="maketInfoChartContainer" style="width: auto; height: 95%;  border: 5px;">
                
               @(Html.DevExtreme().TreeView()
                        .ID("attributeOlapTree")
                        .KeyExpr("Id")
                        .DisplayExpr("NodeName")
                        .ParentIdExpr("ParentId")
                        .DataStructure(TreeViewDataStructure.Plain)
                        .SelectionMode(NavSelectionMode.Multiple)
                        .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
                        .SelectNodesRecursive(false)  // false 2024
                        .SelectByClick(false)
                        .Height(700)
                        .CreateChildren("attributeOlapTree_createChildren")     //  createChildren
                        .OnItemSelectionChanged("attributeOlapTree_OnItemSelectionChanged")
                    )
            </div>
        </div>
    </div>
}


@(Html.DevExtreme().Popup()  //POPUP - Открыть весь доступ
    .ID("FullAccesAllAtributePopup")
    .Width(300)
    .Height(120)
    .ShowTitle(true)
    .Title("Доступ к атрибутам")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("FullAccesAllAtributePopup_template"))
{
    <div id="fullaccessAll-atribute-security" style="display:none;">c</div>
    <div id="fullaccessAll-atribute-info">Открыть доступ ко всем атрибутам?</div>
    <br />
    
     <table>
        <tr>
            <td>
            @(Html.DevExtreme().Button()
            .ID("btnFullAccesAllAtributeYes")
                    .Width(120)
            .Text("Да")
            .OnClick("btnFullAccesAllAtributeYes_Click")
            )
            </td>
            <td>
            @(Html.DevExtreme().Button()
            .ID("btnFullAccesAllAtributeNo")
            .Width(120)
            .Text("Нет")
            .OnClick("function() { $('#FullAccesAllAtributePopup').dxPopup('hide'); }")
            )
            </td>

         </tr>
     </table>
   
}


@(Html.DevExtreme().Popup()    //POPUP - Закрыть весь доступ
    .ID("FullAccesNoneAtributePopup")
    .Width(300)
    .Height(150)
    .ShowTitle(true)
    .Title("Доступ к атрибутам")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
)
@using (Html.DevExtreme().NamedTemplate("FullAccesNoneAtributePopup_template"))
{
    <div id="fullaccessNone-atribute-security" style="display:none;">c</div>
    <div id="fullaccessNone-atribute-info">Закрыть доступ ко всем атрибутам?</div>
        
    <br />
     <table>
         <tr>
            <td>

            @(Html.DevExtreme().CheckBox()
                .ID("cbFullAccesNoneAtribute")
                .OnValueChanged("cbFullAccesNoneAtribute_ValueChanged")
                .Text("Больше не показывать")
                .Width(200)
            )
                
            </td>
         </tr>
     </table>
     <br />
     <table>
        <tr>
            <td>
            @(Html.DevExtreme().Button()
            .ID("btnFullAccesNoneAtributeYes")
                    .Width(120)
            .Text("Да")
            .OnClick("btnFullAccesNoneAtributeYes_Click")
            )
            </td>
            <td>
            @(Html.DevExtreme().Button()
            .ID("btnFullAccesNoneAtributeNo")
            .Width(120)
            .Text("Нет")
            .OnClick("function() { $('#FullAccesNoneAtributePopup').dxPopup('hide'); attributeOlapTreeItemSelectionChanged();}")
            )
            </td>

         </tr>
     </table>
   
}


@(Html.DevExtreme().Popup()      //Окно сообщения в случае ошибки
    .ID("MessageAccesAtributePopup")
    .Width(300)
    .Height(140)
    .ShowTitle(true)
    .Title("Доступ к атрибутам")
    .Visible(false)
    .DragEnabled(false)
    .CloseOnOutsideClick(true)
)

@using (Html.DevExtreme().NamedTemplate("MessageAccesAtributePopup_template"))
{
    <div id="message-atribute-security" style="display:none;">c</div>
    <div id="message-atribute-info">Сообщение об ошибке</div>
    <br/>
    <table>
        <tr>
            <td>
            @(Html.DevExtreme().Button()
            .ID("btnMessageAccesAtributeOk")
            .Width(280)
            .Text("Ok")
            .OnClick("function() { $('#MessageAccesAtributePopup').dxPopup('hide'); }")
            )
            </td>
         </tr>
    </table>
   
>>>>>>> loc4
}